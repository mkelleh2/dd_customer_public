{"data":{"type":"notebooks","attributes":{"metadata":{"type":"documentation"},"name":"[Implementation Services] Managing UI Assets with Terraform","time":{"live_span":"1h"},"cells":[{"id":"ln8cmo89","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"**Last Updated:** Dec 4, 2024"}}},{"id":"dux1cexm","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"# Manage UI Assets with Terraform\nThe Datadog Terraform provider allows you to interact with the Datadog API through a Terraform configuration. You can manage your Datadog resources, such as Dashboards, Monitors, Logs Configuration, etc, with this configuration. ([source](https://docs.datadoghq.com/integrations/terraform/#events))\n\n**Notebook Purpose** | The purpose of this document is to review key concepts when managing monitors and dashboards with Terraform.\n> It is strongly recommended to save versions of the terraform code in a source code manager if you are not already doing so."}}},{"id":"in638sfc","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Why use an IaC tool to manage Datadog UI Assets? \n1. **Consistency and Standardization** | Defining Datadog monitors and dashboards in code with Terraform and using code-based configurations eliminate manual configuration errors and discrepancies between environments (e.g., staging vs. production). Auditing can be done at scale across UI assets more effectively when UI assets are defined in code.\n2. **Version Control** | All configurations can be stored in version control systems (e.g., Git), making it easy to track changes, roll back to previous versions, and audit changes. Collaborators can see who made changes and why through commit histories.\n3. **Scalability and Reusability** | Using a IaaC tool like Terraform with a modular structure allows you to create reusable modules for common dashboard and monitor configurations, reducing the effort required to set up similar monitoring configurations across multiple teams, projects, or regions.\n4. **Automation and Continuous Integration** | The declarative nature of Terraform makes configurations human-readable and easier to share among teams. Teams can collaborate more effectively using a shared codebase for monitoring infrastructure.\n5.  **Deletion Recovery** | With monitors and dashboards defined in code, you can quickly recreate your monitoring infrastructure in case of accidental deletions or modifications."}}},{"id":"r7kpfkm9","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Key Terminology\n> **What is Terraform?**\n_Terraform_ is an infrastructure as code tool that enables you to provision and manage infrastructure in the cloud. Terraform manages external resources (such as public cloud infrastructure, private cloud infrastructure, network appliances, software as a service, and platform as a service) with \"providers\". Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language (HCL), or optionally [JSON](https://en.wikipedia.org/wiki/JSON). ([source](https://en.wikipedia.org/wiki/Terraform_(software)))\n> **What is a Provider?**\nA _Provider_ in Terraform is a plugin that enables interaction with an API. This includes Cloud providers and Software-as-a-service providers. The providers are specified in the Terraform configuration code. They tell Terraform which services it needs to interact with. Once a provider is specified, each provider makes a list of `resources` and `data` types available for use in the Terraform code. ([source](https://spacelift.io/blog/terraform-providers))\n\n> **What are Resources?**\nA _Resource_ in Terraform represents an individual component within a provider. It could be a compute instance, a database, a networking rule, etc. Resources are the basic building blocks in your Terraform configuration files. You define what you want the end state of your infrastructure to look like using these resources. A single provider typically has multiple resources. ([source](https://hector-reyesaleman.medium.com/aws-terraform-provisioning-infra-with-provider-resources-vs-registry-modules-543cba33571c#:~:text=Resources%20are%20the%20basic%20building,provider%20typically%20has%20multiple%20resources.)) \n\n> **What is a Data Source?**\n_Data sources_ allow Terraform to use information defined outside of Terraform, defined by another separate Terraform configuration, or modified by functions. A data source is accessed via a special kind of resource known as a data resource, declared using a data block. A data block requests that Terraform read from a given data source (\"aws_ami\") and export the result under the given local name (\"example\"). The name is used to refer to this resource from elsewhere in the same Terraform module, but has no significance outside of the scope of a module. ([source](https://developer.hashicorp.com/terraform/language/data-sources))\n\n"}}},{"id":"fem34y1b","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## So I'm New to Terraform...\nNo worries! When first starting with this tool, we recommend starting by using the Datadog UI to create a sample monitor or Dashboard and then use the \n\nThe process would look like this:\n1. Configure the UI asset in the Datadog UI\n2. Configure the Datadog provider in Terraform\n3. Set up a terraform directory with a basic `main.tf`\n4. Use the `terraformer import ` command to have Terraform create HCL terraform config files representing the imported resource\n\nSee the full guide [here](https://docs.datadoghq.com/containers/guide/how-to-import-datadog-resources-into-terraform/) for more details.\n\nBy having Terraform do the hard conversion work, you eliminate potential configuration errors from blocking your progress. This imported code can be used as a base for customization of the UI asset once you become more familiar with Terraform. Additionally, these terraform files are powerful for deploying UI assets at scale across orgs or when onboarding new teams/apps/etc."}}},{"id":"t1n0g1hf","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Configuration of Datadog Provider in Terraform ([source](https://docs.datadoghq.com/integrations/terraform/?site=gov#configuration))\n1. [Install Terraform](https://learn.hashicorp.com/tutorials/terraform/install-cli)\n2. Create a directory to contain the Terraform configuration files, for example: `terraform_config/`\n3. Create a `main.tf` file in the `terraform_config/` directory with the following content:\\\n   ```\n   terraform {\n     required_providers { \n       datadog = {\n         source = \"DataDog/datadog\"\n         }\n       }\n     }\n   # Configure the Datadog provider\n   provider \"datadog\" {\n     api_key = var.datadog_api_key\n     app_key = var.datadog_app_key\n   }\n   ```\n> **Note**: If you are not using the Datadog US1 site, you must set the `api_url` [optional parameter](https://registry.terraform.io/providers/DataDog/datadog/latest/docs#optional) with your [Datadog site](https://docs.datadoghq.com/getting_started/site/). Example, if you are using the US1-FED site, following URL as the value of the `api_url` parameter: `https://api.ddog-gov.com/`.\n4. Run `terraform init`. This initializes the directory for use with Terraform and pulls the Datadog provider.\n5. Create any `.tf` file in the `terraform_config/` directory and start creating Datadog resources.\n"}}},{"id":"attcborr","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Create a Dashboard\nBelow are the Resource and Data Sources available in the Datadog Provider for Dashboards.\nType | Name | Description | Example\n------|------|------|------\n Resource | datadog_dashboard | Provides a Datadog dashboard resource. This can be used to create and manage Datadog dashboards. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/dashboard#example-usage)\n Resource | datadog_dashboard_json | Provides a Datadog dashboard JSON resource. This can be used to create and manage Datadog dashboards using the JSON definition. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/dashboard_json#example-usage)\n Resource | datadog_dashboard_list | Provides a Datadog dashboard_list resource. This can be used to create and manage Datadog Dashboard Lists and the individual dashboards within them. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/dashboard_list#example-usage)\n Data Sources | datadog_dashboard (Data Source) | Use this data source to retrieve information about an existing dashboard, for use in other resources. In particular, it can be used in a monitor message to link to a specific dashboard. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/dashboard#example-usage)\n Data Sources | datadog_dashboard_list (Data Source) | Use this data source to retrieve information about an existing dashboard list, for use in other resources. In particular, it can be used in a dashboard to register it in the list. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/dashboard_list#example-usage)\n \n\n> If you are newer to Terraform and Datadog, it is strongly recommended to create the ideal dashboard using the Datadog UI first and exporting the Dashboard JSON definition as a starting point. You can then manage this Dashboard using the [datadog_dashboard_json (Resource)](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/dashboard_json). \n"}}},{"id":"g8sae2do","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Create a Monitor\nBelow are the Resource and Data Sources available in the Datadog Provider for Monitors.\nTYPE | NAME | DESCRIPTION| LINK\n------|------|------|------\n Resource | datadog_monitor | Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/monitor#example-usage)\n Resource | datadog_monitor_config_policy | Provides a Datadog monitor config policy resource. This can be used to create and manage Datadog monitor config policies. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/monitor_config_policy#example-usage)\n Resource | datadog_monitor_json | Provides a Datadog monitor JSON resource. This can be used to create and manage Datadog monitors using the JSON definition. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/monitor_json#example-usage)\n Resource | datadog_security_monitoring_default_rule | Provides a Datadog Security Monitoring Rule API resource for default rules. It can only be imported, you can't create a default rule. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/security_monitoring_default_rule#example-usage)\n Resource | datadog_security_monitoring_filter | Provides a Datadog Security Monitoring Rule API resource for security filters. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/security_monitoring_filter#example-usage)\n Resource | datadog_security_monitoring_rule | Provides a Datadog Security Monitoring Rule API resource. This can be used to create and manage Datadog security monitoring rules. To change settings for a default rule use `datadog_security_default_rule` instead. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/security_monitoring_rule#example-usage)\n Resource | datadog_security_monitoring_suppression | Provides a Datadog Security Monitoring Suppression API resource. It can be used to create and manage Datadog security monitoring suppression rules. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/security_monitoring_suppression#example-usage)\n Data Sources | datadog_monitor | Use this data source to retrieve information about an existing monitor for use in other resources. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/monitor#example-usage)\n Data Sources | datadog_monitor_config_policies | Use this data source to list existing monitor config policies for use in other resources. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/monitor_config_policies#example-usage)\n Data Sources | datadog_monitors | Use this data source to list several existing monitors for use in other resources. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/monitors#schema)\n Data Sources | datadog_security_monitoring_filters | Use this data source to retrieve information about existing security monitoring filters for use in other resources. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/security_monitoring_filters#example-usage)\n Data Sources | datadog_security_monitoring_rules | Use this data source to retrieve information about existing security monitoring rules for use in other resources. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/security_monitoring_rules#example-usage)\n Data Sources | datadog_security_monitoring_suppressions | Use this data source to retrieve information about existing suppression rules, and use them in other resources. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/security_monitoring_suppressions#schema)"}}},{"id":"7aneuq3l","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Enablement Resources\n- [Datadog Provider Terraform](https://registry.terraform.io/providers/DataDog/datadog/latest/docs) Documentation\n- [Datadog Monitor Resource Examples](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/guides/monitors) in Terraform\n- [DataDog/terraform-provider-datadog github repo](https://github.com/DataDog/terraform-provider-datadog)\n- [Submit an issue](https://github.com/DataDog/terraform-provider-datadog/issues) to the terraform-provider-datadog repo\n- Terraform [Resource](https://developer.hashicorp.com/terraform/language/resources) definition\n- Terraform [Data Sources](https://developer.hashicorp.com/terraform/language/data-sources) definition"}}},{"id":"c5x2btwa","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## **Secrets Management Resources**\n- [Datadog: Secrets Management](https://docs.datadoghq.com/agent/configuration/secrets-management/?tab=linux)\n- [Terraform Secrets: How to Manage Them (Tutorial)](https://spacelift.io/blog/terraform-secrets)\n\nTYPE | NAME | DESCRIPTION | LINK\n------|------|------|------\n Resource | datadog_api_key | Provides a Datadog API Key resource. This can be used to create and manage Datadog API Keys. Import functionality for this resource is deprecated and will be removed in a future release with prior notice. Securely store your API keys using a secret management system or use this resource to create and manage new API keys. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/api_key)\n Resource | datadog_application_key | Provides a Datadog Application Key resource. This can be used to create and manage Datadog Application Keys. Import functionality for this resource is deprecated and will be removed in a future release with prior notice. Securely store your application keys using a secret management system or use this resource to create and manage new application keys. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/application_key)\n Data Sources | datadog_api_key | Use this data source to retrieve information about an existing api key. Deprecated. This will be removed in a future release with prior notice. Securely store your API keys using a secret management system or use the datadog_api_key resource to manage API keys in your Datadog account. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/api_key)\n Data Sources | datadog_application_key | Use this data source to retrieve information about an existing application key. Deprecated. This will be removed in a future release with prior notice. Securely store your application keys using a secret management system or use the datadog_application_key resource to manage application keys in your Datadog account. | [Link](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/data-sources/application_key)"}}},{"id":"tx7gu2v8","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Managing Terraform At Scale \n\nManaging Terraform at scale in enterprise tech companies involves strategies, best practices, and tools to ensure efficient, secure, and reliable infrastructure automation. Here’s how it’s typically done:\n\n### **1. Organize Infrastructure and Code**\n\n-   **Modularization**: Use reusable and composable modules for common resources to reduce code duplication and improve maintainability.\n-   **Environment Segmentation**: Separate environments (e.g., dev, staging, prod) into distinct workspaces or directories to prevent overlap and ensure isolation.\n-   **State File Organization**: Divide Terraform state files by project, team, or environment to minimize dependencies and risk of state corruption.\n\n### **2. Use Version Control Systems (VCS)**\n\n-   Store Terraform code in a VCS (e.g., Git) with branching strategies to enable collaboration and code review.\n-   Use feature branches for changes, and merge only after peer review and testing.\n\n### **3. Implement State Management**\n\n-   **Remote State Backends**: Use a remote backend like AWS S3 with DynamoDB for state locking, Azure Blob Storage, or HashiCorp Consul. This ensures scalability, reliability, and team collaboration.\n-   **Encryption and Access Control**: Encrypt state files and implement strict access controls to prevent unauthorized changes.\n-   **State Versioning**: Enable versioning in your backend to recover from accidental changes.\n\n### **4. Automate with CI/CD Pipelines**\n\n-   Integrate Terraform with CI/CD tools (e.g., GitHub Actions, Jenkins, GitLab CI, Azure DevOps).\n\n-   Automate the following:\n\n    -   **Linting**: Use tools like `tflint` or `terraform validate` to catch syntax issues.\n    -   **Plan Approval**: Generate and share Terraform plans for manual or automated approval before applying.\n    -   **Apply Changes**: Apply changes only after review and approval to minimize risk.\n\n### **5. Role-Based Access Control (RBAC)**\n\n-   Restrict who can perform operations like `terraform apply` using tools like Terraform Cloud, Terraform Enterprise, or RBAC policies in cloud platforms.\n-   Use role-based permissions to control access to sensitive resources and environments.\n\n### **6. Adopt Policy as Code**\n\n-   Use tools like **Terraform Sentinel**, **OPA (Open Policy Agent)**, or **Conftest** to enforce policies:\n\n    -   Prevent resource misconfigurations (e.g., ensuring encryption for storage).\n    -   Set budget limits for cloud resources.\n    -   Enforce tagging standards.\n\n### **7. Monitor and Audit**\n\n-   **State File Auditing**: Regularly audit state files for inconsistencies or sensitive data.\n-   **Logging and Alerts**: Log Terraform operations and set alerts for changes to infrastructure or state files.\n-   **Drift Detection**: Use tools like Driftctl or Terraform Cloud’s drift detection to identify unauthorized changes.\n\n### **8. Scale with Terraform Cloud or Enterprise**\n\n-   Use **Terraform Cloud** or **Terraform Enterprise** for:\n\n    -   Collaboration features like workspaces and version control integrations.\n    -   Centralized policy enforcement with Sentinel.\n    -   Remote state storage and concurrency controls.\n\n### **9. Continuous Improvement**\n\n-   Conduct regular training sessions for teams on Terraform best practices.\n-   Stay updated with Terraform updates and HashiCorp best practices.\n-   Use feedback from teams to refine processes and tools.\n\n### Tools & Integrations\n\n-   **Terraform Module Registry**: Centralize and version modules for reusability.\n-   **Secrets Management**: Integrate with HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault to handle sensitive data.\n-   **IaC Scanning Tools**: Tools like Checkov or Terrascan can scan for compliance and security issues in Terraform code.\n\n### Example Workflow at Scale\n\n1.  **Code Development**: Developer writes Terraform code in a feature branch.\n\n2.  **Code Review**: Code is reviewed via pull requests.\n\n3.  **CI/CD Pipeline**:\n\n    -   Lint and validate Terraform code.\n    -   Generate and share `terraform plan` for approval.\n    -   Apply the plan post-approval.\n\n4.  **Monitoring**: Post-apply, the infrastructure is monitored for drift, performance, and compliance."}}}],"template_variables":[],"schema_version":0}}}
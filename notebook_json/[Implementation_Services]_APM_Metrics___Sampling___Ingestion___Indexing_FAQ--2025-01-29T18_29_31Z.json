{"data":{"type":"notebooks","attributes":{"metadata":{"type":"documentation"},"name":"[Implementation Services] APM Metrics / Sampling / Ingestion / Indexing FAQ","time":{"live_span":"1h"},"cells":[{"id":"3mtotv97","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## APM Metrics\n### (1) **Trace Metrics**\nCollected immediately after enabling trace collection and instrumenting your application.  These metrics capture request counts, error counts, and latency measures. They are calculated based on 100% of the application’s traffic, regardless of any [trace ingestion sampling](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms) configuration, unless listed in the exceptions list below.\n\nThe [trace metrics](https://docs.datadoghq.com/tracing/glossary/#trace-metrics) namespace is formatted as:\n    `trace.<SPAN_NAME>.<METRIC_SUFFIX>`. You can see more information about available trace metrics [here](https://docs.datadoghq.com/tracing/metrics/metrics_namespace/).\n \n**Exceptions**: \n1. **Application-side sampling** - Some tracing libraries support application-side sampling, which reduces the number of spans before they are sent to the Datadog Agent. This is generally not recommended.\n2. **OpenTelemetry Sampling** - OTEL instrumented services will see their trace metrics affected by sampling rates set at the SDK and/or collector level. \n3. **XRay sampling** - XRay spans are sampled before they are sent to Datadog, which means trace metrics might not reflect all traffic.\n   \n### (2) **Span Metrics**  \n\nGenerate metrics from 100% of ingested spans, regardless of whether the spans are indexed by a [retention filter](https://docs.datadoghq.com/tracing/trace_pipeline/trace_retention). \n\n**Billing Note:** Metrics created from ingested spans are billed as [Custom Metrics](https://docs.datadoghq.com/account_management/billing/custom_metrics/).\n\n### (3) **Runtime Metrics**\n\nEnable [runtime metrics collection](https://docs.datadoghq.com/tracing/metrics/runtime_metrics/) in the tracing client to gain additional insights into an application’s performance. Runtime metrics can be viewed in the context of a service, correlated in the Trace View at the time of a given request, and utilized anywhere in the platform. \n"}}},{"id":"cy8d0mf9","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Sampling & Ingestion Control\n\n### Sampling\nThe default sampling mechanism is called _[head-based sampling](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#head-based-sampling)_. The decision of whether to keep or drop a trace is made at the very beginning of the trace, at the start of the [root span](https://docs.datadoghq.com/tracing/glossary/#trace-root-span).\n\nBy default, **sampling rates are calculated to target 10 traces per second per Datadog Agent.** You can override the default calculated sampling rate by configuring [sampling rules](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/#in-tracing-libraries-user-defined-rules) in the tracing library. \n\nFor instance, if service `A` has more traffic than service `B`, the Agent might vary the sampling rate for `A` such that `A` keeps no more than seven traces per second, and similarly adjust the sampling rate for `B` such that `B` keeps no more than three traces per second, for a total of 10 traces per second.([source](https://docs.datadoghq.com/tracing/guide/ingestion_sampling_use_cases/#solution-sampling-rules))\n\n![](https://datadog-docs.imgix.net/images/tracing/guide/ingestion_sampling_use_cases/head-based-sampling.de2525a2b984351fb254ade66855bbe6.png?fit=max&auto=format&w=1205&h=655&dpr=2)"}}},{"id":"bczakgfd","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"You can set sampling rates for head-based sampling in two places:\n\n-   At the **[Agent](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#in-the-agent)** level (default)\n-   At the **[Tracing Library](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#in-tracing-libraries-user-defined-rules)** level: any tracing library mechanism overrides the Agent setup."}}},{"id":"mbupxdve","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Ingestion Control\n\nIngestion controls using the [ingestion control page](https://us3.datadoghq.com/apm/traces/ingestion-control) affect what traces are sent by your applications to Datadog. [APM Metrics](https://docs.datadoghq.com/tracing/metrics/metrics_namespace/) are calculated based on _all_ generated traces, and are not impacted by ingestion controls.\n\nWhy manage INGESTION of traces using the ingestion control page?\n-   Gain visibility on your service-level ingestion configuration.\n-   Adjust trace sampling rates for high throughput services or endpoints to better manage ingestion budget.\n-   Adjust trace sampling rates for low throughput, rare traffic services or endpoints to increase visibility.\n-   Understand which [ingestion mechanisms](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/) are responsible for sampling most of your traces.\n-   Investigate and act on potential ingestion configuration issues, such as limited CPU or RAM resources for the Agent."}}},{"id":"3y8fctl9","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"### Monitoring Your Ingestion\nTo each span ingested, there is attached a unique **ingestion reason** referring to one of the mechanisms described in this page. [Usage metrics](https://docs.datadoghq.com/tracing/trace_pipeline/metrics/) `datadog.estimated_usage.apm.ingested_bytes` and `datadog.estimated_usage.apm.ingested_spans` are tagged by `ingestion_reason`.\n\nUse the [Ingestion Reasons dashboard](https://us3.datadoghq.com/dash/integration/apm_ingestion_reasons) to investigate in context each of these ingestion reasons. Get an overview of the volume attributed to each mechanism, to quickly know which configuration options to focus on. ([source](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#:~:text=To%20each%20span,to%20focus%20on.))"}}},{"id":"b5w85a0d","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"### Ingestion Reasons\n\nIngestion Mechanism | Reason | Documentation\n------|------|------\n In the Agent | `ingestion_reason: auto` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#in-the-agent)\n In tracing libraries: user-defined rules | `ingestion_reason: rule` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#in-tracing-libraries-user-defined-rules)\nError traces | `ingestion_reason: error` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#error-traces)\nRare traces | `ingestion_reason: rare` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#rare-traces)\nForce keep and drop | `ingestion_reason: manual` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#force-keep-and-drop)\nSingle spans | `ingestion_reason : single_span` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#single-spans)\nRUM traces | `ingestion_reason: rum` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#rum-traces)\nSynthetic traces | `ingestion_reason: synthetics` and `ingestion_reason: synthetics-browser` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#synthetic-traces)\nIngestion mechanisms in OpenTelemetry | `ingestion_reason: otel` | [Link](https://docs.datadoghq.com/tracing/trace_pipeline/ingestion_mechanisms/?tab=java#ingestion-mechanisms-in-opentelemetry)"}}},{"id":"pgsjyeqh","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"## Retention Filters\n\nIn Datadog's [Trace Pipeline](https://docs.datadoghq.com/tracing/trace_pipeline/), _ingestion_ of traces to the Datadog platform and trace _retention_ in the Datadog UI are two customizable mechanisms in the Datadog platform.\n\nAfter spans have been ingested, some are kept in the Datadog UI for searching, visualization, and correlation for **15 days** according to the retention filters that have been set on your account. The traces retained in the platform by the retention filter is sometimes referred to as \"indexed traces.\"\n\n_IMPORTANT: Unlike Log Indexes, when traces are \"indexed,\" they are only retained in the UI for 15 days. All metrics related to these traces are retained in the Datadog platform for 15 months ([source](https://docs.datadoghq.com/developers/guide/data-collection-resolution-retention/#:~:text=Retention%20for%20details.-,APM,-Trace%20metrics%20(unsampled)))._\n\nThe following retention filters may be enabled by [default](https://docs.datadoghq.com/tracing/trace_pipeline/trace_retention/#retention-filters) depending on what other products you are using in the Datadog platform:\n\nRetention Filter | Description\n------|------\n Intelligent Retention Filter | Always turned on by default. Retains spans for every environment, service, operation, and resource for different latency distributions.\n Error Default | Indexes error spans with `status:error`. The retention rate and the query are configurable. For example, to capture production errors, set the query to `status:error, env:production`. Disable the retention filter if you do not want to capture the errors by default.\n Application Security | Enabled if you are using Application Security Management. It ensures the retention of all spans in traces that have been identified as having an application security impact (an attack attempt).\n Synthetics | Enabled if you are using Synthetic Monitoring. It ensures that traces generated from synthetic API and browser tests remain available by default. See [Synthetic APM](https://docs.datadoghq.com/synthetics/apm/) for more information, including how to correlate traces with synthetic tests.\n \n In addition to these, you can create any number of additional [custom tag-based retention filters](https://docs.datadoghq.com/tracing/trace_pipeline/trace_retention/#create-your-own-retention-filter) for your services, to capture the data that matters the most to your business."}}},{"id":"utr49rlc","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"Example for using Trace Analytics Monitor\n```\n{\n\t\"name\": \"\",\n\t\"type\": \"trace-analytics alert\",\n\t\"query\": \"trace-analytics(\\\"status:error\\\").rollup(\\\"count\\\").by(\\\"service,resource_name\\\").last(\\\"5m\\\") > null\",\n\t\"message\": \"\",\n\t\"tags\": [],\n\t\"options\": {\n\t\t\"thresholds\": {\n\t\t\t\"critical\": null\n\t\t},\n\t\t\"enable_logs_sample\": false,\n\t\t\"notify_audit\": false,\n\t\t\"on_missing_data\": \"default\",\n\t\t\"include_tags\": true,\n\t\t\"new_group_delay\": 60\n\t}\n}\n```"}}}],"template_variables":[],"schema_version":0}}}